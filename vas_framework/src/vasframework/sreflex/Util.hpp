#pragma once
#include <string>
#include <boost/type_index.hpp>
#include "../VASConfig.hpp"

/** @addtogroup sreflex
	  @{
*/

/** Turn a block of code into string
	  @param code Code that need to translate.
	  @return "code" in std::string
*/
#define SREFLEX_CODE2STR(code) std::string(#code)
/** @} */

namespace vas
{
	namespace sreflex
	{
		/** @addtogroup sreflex
			  @{
		*/
		/** Return object's name
			  @tparam Type Any object type
			  @return Name of the object "Type"
		*/
		template <typename Type>
		std::string getObjectName()
		{
			auto result = boost::typeindex::type_id<Type>().pretty_name();
			simpliflyObjectName(result);
			return result;
		}
		
		/** Return object's name with CVR(Const, Volatile & Refrence)
			  @tparam Type Any object type
			  @return Name of the object "Type"
		*/
		template <typename Type>
		std::string getObjectNameWithCvr()
		{
			auto result = boost::typeindex::type_id_with_cvr<Type>().pretty_name();
			simpliflyObjectName(result);
			return result;
		}

		/** Return object's name at runtime. This function work with polymorphysm.
			  @param t Any object
			  @return Name of the object "Type" with polymorphysm.
		*/
		template <typename Type>
		std::string getObjectNameRuntime(const Type& t)
		{
			auto result = boost::typeindex::type_id_runtime(t).pretty_name();
			simpliflyObjectName(result);
			return result;
		}

		/** Return the object info of an object
			  @tparam Type Any object decalration
			  @retval boost::typeindex::type_index of the object
		*/
		template <typename Type>
		boost::typeindex::type_index getObjectInfo()
		{
			return boost::typeindex::type_id<Type>();
		}

		/** Return the object info of an object with CVR(Const, Volatile & Refrence)
			  @tparam Type Any object decalration
			  @retval boost::typeindex::type_index of the object
		*/
		template <typename Type>
		boost::typeindex::type_index getObjectInfo_with_cvr()
		{
			return boost::typeindex::type_id_with_cvr<Type>();
		}

		/** Return the object info of an object on runtime
			  @param obj Any object
			  @retval boost::typeindex::type_index of the object
		*/
		template <typename Type>
		boost::typeindex::type_index getObjectInfo_runtime(const Type& obj)
		{
			return boost::typeindex::type_id_runtime(obj);
		}

		/** Simplifly the object name that generated by boost::typeindex from other compiler as same as msvc
			  @param input String that need to simplify
		*/
		VAS_DECLSPEC void simpliflyObjectName(std::string& input);
		/** Simplifly the object name that generated by boost::typeindex from other compiler as same as msvc, thsi
		@param input Input string
		@return Simplified string of "input"
		*/
		VAS_DECLSPEC std::string simpliflyObjectNameCpy(const std::string& input);
	}
}

/** @} */